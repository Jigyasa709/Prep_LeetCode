/*https://leetcode.com/problems/maximize-total-cost-of-alternating-subarrays/description/
memoization + tabulation 
2 variable mul factor -1 or 1 and ith index so 2xn array is used here
if ith element is multiplied by -1 then dp[i][-1] = dp[i-1][1] it means take 1 mutipled previous element.
if ith element is getting multipled by 1 it means choose among previous negative or positive element bcz we can split the array when the element is choosen positive*/


// long long solver(int i,int mul,vector<int>& nums,vector <vector<long long>> &dp)
    // {
    //      if(i==nums.size())
    //      {
    //         return 0;
    //      }
         
    //      if(dp[i][mul+1]!=-1)
    //      return dp[i][mul+1];

    //      dp[i][mul+1] = max(nums[i]*mul + solver(i+1,(-1)*mul,nums,dp),nums[i] + solver(i+1,-1,nums,dp));
    //      return dp[i][mul+1];
    // }
    long long maximumTotalCost(vector<int>& nums) {
       int n = nums.size();
       vector <vector<long long>> dp(n+1,vector<long long>(3,-1));

        dp[0][0] = nums[0];
        dp[0][2] = nums[0];

       for(int i=1;i<n;i++)
       {
          dp[i][0] = (-1)*nums[i] + dp[i-1][2];
          dp[i][2] = nums[i] + max(dp[i-1][0],dp[i-1][2]);
       }
       return max(dp[n-1][0],dp[n-1][2]);
    }
