//trace eular path using dfs
void DFS(int n,string source,unordered_map <string,vector<pair<string,bool>>> &adj,
    vector <string> &result)
    {   
        // if(result.size()>n)
        // return;

        for(auto it = adj[source].begin();it!=adj[source].end();it++)
        {   
            if(!it->second)
            {//   cout<<it->first<<endl;
            //    cout<<it->second<<endl;
               it->second = 1;
               DFS(n,it->first,adj,result);
            }
        }
        result.push_back(source);
         
    }
    vector<string> findItinerary(vector<vector<string>>& tickets) {
         vector <string> result;

      int n = tickets.size();

      unordered_map <string,vector<pair<string,bool>>> adj;

      for(int i=0;i<tickets.size();i++)
      { adj[tickets[i][0]].push_back({tickets[i][1],false});
      }  

       for(auto it = adj.begin();it!=adj.end();it++)
       { sort(it->second.begin(),it->second.end());
       } 
      
      DFS(n,"JFK",adj,result);
      reverse(result.begin(),result.end());
      
      return result;
    }
