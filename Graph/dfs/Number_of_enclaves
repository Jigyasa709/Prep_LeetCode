https://leetcode.com/problems/number-of-enclaves/description/

//start dfs from all the border points which are 1 and mark vis matrix 
//after dfs tracking count the points which are not visited

vector<pair<int,int>> dir={{0,1},{0,-1},{1,0},{-1,0}};
    bool isValid(int x,int y,int m,int n)
    {
       if(x<0 || x>m-1 || y<0 || y>n-1)
         return false;
         return true;
    }
    void dfs(int x,int y,vector<vector<int>>& grid,vector<vector<bool>>& vis)
    {
        vis[x][y] = true;
        
        for(auto d: dir)
        {
            int nbrX = x+d.first;
            int nbrY = y+d.second;

            if(isValid(nbrX,nbrY,grid.size(),grid[0].size()) && !vis[nbrX][nbrY] && grid[nbrX][nbrY])
            {
                dfs(nbrX,nbrY,grid,vis);
            }
        }
    }
    int numEnclaves(vector<vector<int>>& grid) {
      int m = grid.size();
      int n = grid[0].size();

      vector<vector<bool>> vis(m,vector<bool>(n,false));

      for(int j=0;j<n;j++)
      {
        if(grid[0][j]==1 && !vis[0][j])
        {
           dfs(0,j,grid,vis);
        }
        if(grid[m-1][j]==1 && !vis[m-1][j])
        {
            dfs(m-1,j,grid,vis);
        }
      }

      for(int i=0;i<m;i++)
      {
         if(grid[i][0]==1 && !vis[i][0])
        {
           dfs(i,0,grid,vis);
        }
        if(grid[i][n-1]==1 && !vis[i][n-1])
        {
            dfs(i,n-1,grid,vis);
        }
      }

        int ans =0;
      for(int i=0;i<m;i++)
      {
        for(int j=0;j<n;j++)
        {
            if(!vis[i][j] && grid[i][j]==1)
            ans++;
        }
      }
      return ans;
    }
