    int dfs(vector<vector<int>> &graph,int s,int d,vector <bool> &vis)
    {
        
        if(s==d)
        return 1;
        
        vis[s] = true;
        
        int paths = 0;
        for(int nbr : graph[s])
        {
           if(!vis[nbr])
           {  // cout<<nbr<<endl;
               paths += dfs(graph,nbr,d,vis);
           }
        }
        vis[s] = false;
        return paths;
    }
	int possible_paths(vector<vector<int>>edges, int n, int s, int d){
	    vector<vector<int>> graph(n);
	    
	    for(vector <int> edge : edges)
	    {
	        graph[edge[0]].push_back(edge[1]);
	        //graph[edge[1]].push_back(edge[0]);
	    }
	    
	    vector <bool> vis(n,false);
	    
	    return dfs(graph,s,d,vis);
	}