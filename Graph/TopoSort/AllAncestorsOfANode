/*https://leetcode.com/problems/all-ancestors-of-a-node-in-a-directed-acyclic-graph/description/ */

 void dfs(int s,vector<bool> &vis,vector<vector<int>> &adj)
    {
        vis[s] = true;

        for(int nbr: adj[s])
        {
            if(!vis[nbr])
            {
                dfs(nbr,vis,adj);
            }
        }
    }
    vector<vector<int>> getAncestors(int n, vector<vector<int>>& edges) {
        vector<vector<int>> adj(n);
        vector<vector<int>> ancestors(n);

        for(auto edge:edges)
        {
            adj[edge[1]].push_back(edge[0]);
        }

        for(int i=0;i<n;i++)
        {
            vector <bool> vis(n,false);

            dfs(i,vis,adj);

            for(int v=0;v<n;v++)
            {
                if(v!=i && vis[v])
                {
                    ancestors[i].push_back(v);
                }
            }
        }
        return ancestors;
    }
