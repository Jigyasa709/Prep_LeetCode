//join the groups and maintain a multimap of sizess of groups when uniting 2 groups delete first them from multiset and add bigger size group. 
//maintaining max and min of sizes cwould not goive us right value of smallest size.as smallest can be deleted at any time of uniting and can be changed.
#include <bits/stdc++.h>
using namespace std;

vector <int> parent(1e5);
vector<int> size(1e5);

multiset <int> sizes;

int largest = INT_MIN;
int smallest = INT_MAX;

void make(int v)
{
	parent[v] = v;
	size[v] = 1;
	sizes.insert(1);
}

void merge(int a,int b)
{
	int unite = a + b;
	sizes.erase(sizes.find(a));
	sizes.erase(sizes.find(b));

	sizes.insert(unite);
}
int find(int v)
{
	if(v==parent[v]) return v;
	return find(parent[v]);
}

void Union(int a,int b)
{
	a = find(a);
	b = find(b);

	if(a!=b)
	{
		if(size[a]<size[b])
		 swap(a,b);
		parent[b] = a;
		merge(size[a],size[b]);
		size[a] += size[b];    
	}
}
int main() {
	int N,Q;
	cin>>N>>Q;
    
	for(int i=0;i<N;i++)
	{
		make(i);
	}
	int a,b;
	for(int i=0;i<Q;i++)
	{
		cin>>a>>b;
		Union(a,b);
		if(sizes.size()==1)
		{
			cout<<0<<endl;
		}
		else
		{
			cout<<*(--sizes.end()) - *sizes.begin();
			cout<<endl;
		}
	}

}
