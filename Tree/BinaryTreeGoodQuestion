//https://leetcode.com/problems/number-of-good-leaf-nodes-pairs/description/
//returning array of depths of leaves from right and left side for every non-leave nodes in the tree. and add left side leaves depth + right side leaves depth - 2*current_depth
//whichever is less than distance add it to count
class Solution {
public:
    vector <int> leavesPairs(TreeNode *root,int distance,int &count,int depth)
    {   vector<int> ans;
        if(root!=NULL)
        {
            vector<int> left = leavesPairs(root->left,distance,count,depth+1);
            vector<int> right = leavesPairs(root->right,distance,count,depth+1);

            if(root->left==NULL && root->right==NULL)
            {
                ans.push_back(depth);
                return ans;
            }

            ans.insert(ans.end(),left.begin(),left.end());
            ans.insert(ans.end(),right.begin(),right.end());

            for(int i=0;i<left.size();i++)
            {
                for(int j=0;j<right.size();j++)
                {
                    if(left[i] + right[j] - 2*depth <=distance)
                    {
                        count++;
                    }
                }
            }
            return ans;
        }
        return ans;
    }
    int countPairs(TreeNode* root, int distance) {
       int count =0;
       leavesPairs(root,distance,count,0); 
       return count;
    }
};
